//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: inboxTypes.proto

package il.ac.technion.cs.softwaredesign;

@kotlin.jvm.JvmName("-initializeinboxP")
inline fun inboxP(block: il.ac.technion.cs.softwaredesign.InboxPKt.Dsl.() -> kotlin.Unit): il.ac.technion.cs.softwaredesign.InboxP =
  il.ac.technion.cs.softwaredesign.InboxPKt.Dsl._create(il.ac.technion.cs.softwaredesign.InboxP.newBuilder()).apply { block() }._build()
object InboxPKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: il.ac.technion.cs.softwaredesign.InboxP.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: il.ac.technion.cs.softwaredesign.InboxP.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): il.ac.technion.cs.softwaredesign.InboxP = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class RecordProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, .il.ac.technion.cs.softwaredesign.MessageList&gt; record = 1;</code>
     */
     val record: com.google.protobuf.kotlin.DslMap<kotlin.String, il.ac.technion.cs.softwaredesign.MessageList, RecordProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getRecordMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getRecordMap()
      )
    /**
     * <code>map&lt;string, .il.ac.technion.cs.softwaredesign.MessageList&gt; record = 1;</code>
     */
    @JvmName("putRecord")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, il.ac.technion.cs.softwaredesign.MessageList, RecordProxy>
      .put(key: kotlin.String, value: il.ac.technion.cs.softwaredesign.MessageList) {
         _builder.putRecord(key, value)
       }
    /**
     * <code>map&lt;string, .il.ac.technion.cs.softwaredesign.MessageList&gt; record = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setRecord")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, il.ac.technion.cs.softwaredesign.MessageList, RecordProxy>
      .set(key: kotlin.String, value: il.ac.technion.cs.softwaredesign.MessageList) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, .il.ac.technion.cs.softwaredesign.MessageList&gt; record = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeRecord")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, il.ac.technion.cs.softwaredesign.MessageList, RecordProxy>
      .remove(key: kotlin.String) {
         _builder.removeRecord(key)
       }
    /**
     * <code>map&lt;string, .il.ac.technion.cs.softwaredesign.MessageList&gt; record = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllRecord")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, il.ac.technion.cs.softwaredesign.MessageList, RecordProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, il.ac.technion.cs.softwaredesign.MessageList>) {
         _builder.putAllRecord(map)
       }
    /**
     * <code>map&lt;string, .il.ac.technion.cs.softwaredesign.MessageList&gt; record = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearRecord")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, il.ac.technion.cs.softwaredesign.MessageList, RecordProxy>
      .clear() {
         _builder.clearRecord()
       }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun il.ac.technion.cs.softwaredesign.InboxP.copy(block: il.ac.technion.cs.softwaredesign.InboxPKt.Dsl.() -> kotlin.Unit): il.ac.technion.cs.softwaredesign.InboxP =
  il.ac.technion.cs.softwaredesign.InboxPKt.Dsl._create(this.toBuilder()).apply { block() }._build()

